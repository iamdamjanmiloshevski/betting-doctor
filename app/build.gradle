plugins {
  id 'com.android.application'
  id 'kotlin-android'
  id 'kotlin-kapt'
  id 'dagger.hilt.android.plugin'
  id 'com.google.gms.google-services'
  id 'com.google.firebase.crashlytics'
  id 'org.jetbrains.kotlin.android'
  id("org.jetbrains.kotlin.plugin.serialization") version "1.6.10"
}

android {
  compileSdkVersion rootProject.ext.targetSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion
  defaultConfig {
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    multiDexEnabled true
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    vectorDrawables {
      useSupportLibrary true
    }
  }
  Properties clientProperties = new Properties()
  clientProperties.load(project.rootProject.file("client.properties").newDataInputStream())
  def clientKeyAlias = clientProperties['key.alias']
  def clientPassword = clientProperties['key.pwd']
  def clientKeyLocation = clientProperties['key.location']

  Properties adminProperties = new Properties()
  adminProperties.load(project.rootProject.file("admin.properties").newDataInputStream())
  def adminKeyAlias = adminProperties['key.alias']
  def adminPassword = adminProperties['key.pwd']
  def adminKeyLocation = adminProperties['key.location']

  Properties sportsAnalystProperties = new Properties()
  sportsAnalystProperties.load(project.rootProject.file("sports-analyst.properties").newDataInputStream())
  def sportsAnalystKeyAlias = sportsAnalystProperties['key.alias']
  def sportsAnalystPassword = sportsAnalystProperties['key.pwd']
  def sportsAnalystKeyLocation = sportsAnalystProperties['key.location']

  signingConfigs {
    client {
      keyAlias clientKeyAlias
      keyPassword clientPassword
      storeFile file(clientKeyLocation)
      storePassword clientPassword
    }
    admin {
      keyAlias adminKeyAlias
      keyPassword adminPassword
      storeFile file(adminKeyLocation)
      storePassword adminPassword
    }
    sportsAnalyst{
      keyAlias sportsAnalystKeyAlias
      keyPassword sportsAnalystPassword
      storeFile file(sportsAnalystKeyLocation)
      storePassword sportsAnalystPassword
    }
  }


  buildTypes {
    debug {
      buildConfigField("String", "BASE_URL", '"http://' + rootProject.ext.localhost_ip + '/api/v1/"')
    }
    release {
      minifyEnabled true
      shrinkResources true
      buildConfigField("String", "BASE_URL", '"https://betting-doctor.herokuapp.com/api/v1/"')
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }

  flavorDimensions "default"

  productFlavors {
    def clientConfig = signingConfigs.client
    def adminConfig = signingConfigs.admin
    def sportsAnalystConfig = signingConfigs.sportsAnalyst
    client {
      dimension "default"
      signingConfig clientConfig
      versionCode generateVersionCode(false, true)
      versionName generateVersionName(true)
      applicationId "com.twoplaytech.drbetting"
      manifestPlaceholders = [appLabel: "Soccer Tips"]
      resValue "string", "app_name", "Soccer Tips"
    }

    admin {
      dimension "default"
      signingConfig adminConfig
      versionCode generateVersionCode(false,false)
      versionName generateVersionName()
      manifestPlaceholders = [appLabel: "2Play Admin"]
      applicationId "com.twoplaytech.drbetting.admin"
      resValue "string", "app_name", "2Play Admin"
    }

    sportsAnalyst{
      dimension "default"
      signingConfig sportsAnalystConfig
      versionCode 1
      versionName "1.0.0"
      applicationId "com.twoplaytech.drbetting.sportsanalyst"
      manifestPlaceholders = [appLabel: "Sports Analyst"]
      resValue "string", "app_name", "Sports Analyst"
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  kotlinOptions {
    jvmTarget = '1.8'
    useIR = true
  }
  buildFeatures {
    dataBinding true
    viewBinding true
    compose true
  }
  composeOptions {
    kotlinCompilerExtensionVersion compose_version
  }
  packagingOptions {
    resources {
      excludes += '/META-INF/{AL2.0,LGPL2.1}'
    }
  }

}
/**
 *
 * @param increment - flag used to determine if the version code should be incremented
 * (set this to true only when you're publishing new version to the Google Play store)
 * @param isClientFlavor - flag used to determine if the client version properties
 * should be read (false - read admin, true - read client)
 * @return - the version number of the app
 */
private Integer generateVersionCode(boolean increment = false, boolean isClientFlavor = false) {
  def versionPropertiesFile = getVersionPropertiesFile(isClientFlavor)
  Properties versionProperties = new Properties()
  versionProperties.load(versionPropertiesFile.newDataInputStream())
  def currentVersion = versionProperties['version.code'].toInteger()
  if (!increment) return currentVersion else {
    def newVersion = currentVersion + 1
    versionProperties['version.code'] = newVersion.toString()
    versionProperties.store(versionPropertiesFile.newWriter(), null)
    return newVersion
  }
}
/**
 *
 * @param isClientFlavor - flag used to determine if the client version properties
 * should be read (false - read admin, true - read client)
 * @return - the version name in semantic format
 */
private String generateVersionName(boolean isClientFlavor = false) {
  def versionPropertiesFile = getVersionPropertiesFile(isClientFlavor)
  Properties versionProperties = new Properties()
  versionProperties.load(versionPropertiesFile.newDataInputStream())
  def major = versionProperties['version.major']
  def minor = versionProperties['version.minor']
  def patch = versionProperties['version.patch']
  return major + "." + minor + "." + patch
}
/**
 * This function is used to fetch the properties file based on a product flavor flag
 * @param isClientFlavor - flag used to determine if the client version properties
 * should be read (false - read admin, true - read client)
 * @return the actual properties file
 */
private File getVersionPropertiesFile(boolean isClientFlavor = false) {
  if (isClientFlavor) {
    return project.rootProject.file("client-version.properties")
  } else return project.rootProject.file("admin-version.properties")
}

dependencies {

  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation 'androidx.core:core-ktx:1.7.0'
  implementation 'androidx.appcompat:appcompat:1.4.1'
  implementation 'com.google.android.material:material:1.5.0'
  implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
  implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
  implementation 'androidx.navigation:navigation-fragment-ktx:2.4.2'
  implementation 'androidx.navigation:navigation-ui-ktx:2.4.2'
  implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
  implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
  implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.1'
  implementation 'androidx.navigation:navigation-fragment-ktx:2.4.2'
  implementation 'androidx.navigation:navigation-ui-ktx:2.4.2'
  implementation "androidx.datastore:datastore:1.0.0"
  implementation "androidx.datastore:datastore-preferences:1.0.0"
  implementation 'androidx.preference:preference-ktx:1.2.0'
  implementation 'androidx.work:work-runtime:2.7.1'
  implementation 'androidx.work:work-runtime-ktx:2.7.1'
  implementation 'androidx.core:core-splashscreen:1.0.0-beta02'

  //region Hilt
  implementation "com.google.dagger:hilt-android:$hilt_version"
  implementation "androidx.compose.ui:ui:$compose_version"
  implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
  androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
  debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
  kapt "com.google.dagger:hilt-compiler:$hilt_version"
  implementation 'androidx.hilt:hilt-work:1.0.0'
  kapt 'androidx.hilt:hilt-compiler:1.0.0'
  //endregion

  //region Ktor Client
  implementation("io.ktor:ktor-client-core:$ktorVersion")
  implementation("io.ktor:ktor-client-android:$ktorVersion")
  implementation("io.ktor:ktor-client-content-negotiation:$ktorVersion")
  implementation("io.ktor:ktor-serialization-gson:$ktorVersion")
  implementation("io.ktor:ktor-client-logging:$ktorVersion")
  implementation("io.ktor:ktor-client-resources:$ktorVersion")
  //endregion

  //region Firebase
  implementation platform("com.google.firebase:firebase-bom:$firebaseBomVersion")
  implementation 'com.google.firebase:firebase-analytics-ktx'
  implementation 'com.google.firebase:firebase-crashlytics-ktx'
  implementation 'com.google.firebase:firebase-firestore-ktx'
  implementation 'com.google.firebase:firebase-auth-ktx'
  implementation 'com.google.firebase:firebase-messaging'
  implementation 'com.google.firebase:firebase-appcheck-safetynet:16.0.0-beta06'
  //endregion

  //region Glide
  implementation "com.github.bumptech.glide:glide:$glideVersion"
  implementation "com.github.bumptech.glide:annotations:$glideVersion"
  kapt "com.github.bumptech.glide:compiler:$glideVersion"
  //endregion

  //region Caverock SVG
  implementation "com.caverock:$caverockVersion"
  //endregion

  //region AndroidX Security
  implementation "androidx.security:security-crypto:$xCryptoVersion"
  //endregion

  //region Material Dialogs
  implementation "com.afollestad.material-dialogs:core:$materialDialogsVersion"
  implementation "com.afollestad.material-dialogs:datetime:$materialDialogsVersion"
  //endregion

  //region Retrofit
  implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
  implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
  //endregion

  //region Gson
  implementation "com.google.code.gson:gson:$gsonVersion"
  //endregion

  //region OkHttp
  implementation(platform("com.squareup.okhttp3:okhttp-bom:$okHttpVersion"))
  implementation("com.squareup.okhttp3:okhttp")
  implementation("com.squareup.okhttp3:logging-interceptor")
  //endregion

  //region Timber logger
  implementation "com.jakewharton.timber:timber:$timberLoggerVersion"
  //endregion

  //region WorkManager
  implementation "androidx.work:work-runtime-ktx:$work_version"
  //endregion

  //region JWTDecode Android
  implementation "com.auth0.android:jwtdecode:$jwtDecode_version"
  //endregion

  //region ThreeTen Android backport
  implementation "com.jakewharton.threetenabp:threetenabp:$threeTenAndroidBackportVersion"
  //endregion

  //region Facebook Stetho
  implementation "com.facebook.stetho:stetho:$stethoVersion"
  implementation "com.facebook.stetho:stetho-okhttp3:$stethoVersion"
  //endregion

  //region Jetpack Compose
// Integration with activities
  implementation 'androidx.activity:activity-compose:1.4.0'
  // Compose Material Design
  implementation 'androidx.compose.material:material:1.1.1'
  // Animations
  implementation 'androidx.compose.animation:animation:1.1.1'
  // Tooling support (Previews, etc.)
  implementation 'androidx.compose.ui:ui-tooling:1.1.1'
  implementation "androidx.compose.material:material-icons-extended:$compose_version"
  // Integration with ViewModels
  implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.4.1'

  implementation "androidx.constraintlayout:constraintlayout-compose:1.0.0"
  implementation "androidx.navigation:navigation-compose:2.4.1"
  implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'
  //endregion

  //region Coil
  implementation("io.coil-kt:coil-compose:1.4.0")
  //endregion

  //region LeakCanary
  // debugImplementation because LeakCanary should only run in debug builds.
  debugImplementation "com.squareup.leakcanary:$leakCanaryVersion"
  //endregion

  testImplementation 'junit:junit:4.+'
  androidTestImplementation 'androidx.test.ext:junit:1.1.2'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}